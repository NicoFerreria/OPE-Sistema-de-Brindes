<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAMQOAADEDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAADUAAAA1AAAANQAAADoAAABKAAAANQAA
        ADUAAAA1AAAANQAAADUAAAA1AAAANQAAADUAAAA1AAAANQAAADUAAAA1AAAANQAAADUAAAA1AAAANQAA
        ADUAAAA3AAAATQAAADUAAAA1AAAANQAAACcAAAAAAAAAAAAAAAAAAAAxAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAvwAAAAAAAAAAAAAAAAAAADEAAAD/AAAAIwAA
        ALAAAADOAAAAIgAAABEAAAARAAAAEQAAABEAAAARAAAAEQAAABEAAAAsAAAATgAAAEUAAAAYAAAAEQAA
        ABEAAAARAAAAEQAAABEAAAARAAAAEgAAAFwAAAD/AAAARQAAAI4AAAC/AAAAAAAAAAAAAAAAAAAAMQAA
        AP8AAAC6AAAA/gAAADsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApAAAAugAAAP8AAAD/AAAA/wAA
        AO8AAAB5AAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK0AAADrAAAAvwAAAMAAAAAAAAAAAAAA
        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
        ABcAAAAAAAAAAAAAAAAAAAAA////////////////8AAAAff///f3/x//9/////f////3////9/////f/
        /7f3////9/////f////n////9///9/f////3////97//n/////////9/v//3//////////9/6//////8
        ///////v//3/7///3/////n/////3/////8=
</value>
  </data>
</root>